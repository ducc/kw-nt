syntax = "proto3";

package protos;
option go_package = "github.com/ducc/kwɒnt/protos";

import "google/protobuf/timestamp.proto";

message SessionInfo {
    string session_id = 1;
    Broker.Name broker = 2;
    string service_address = 3;
}

message Broker {
    enum Name {
        UNKNOWN = 0;
        XTB_DEMO = 1;
        XTB_RETAIL = 2;
        XTB_PRO = 3;
    }

    Name name = 1;
}

// prices are represented in micro amounts
// 1,000,000 = £1
//   100,000 = £0.10
//    10,000 = £0.01
//     1,000 = £0.001
//       100 = £0.0001
//        10 = £0.00001
//         1 = £0.000001
// 1,280,510 = £1.28051

message Candlestick {
    google.protobuf.Timestamp timestamp = 1;
    Broker.Name broker = 2;
    Symbol.Name symbol = 3;
    double open_price = 4;
    double close_price = 5;
    double high_price = 6;
    double low_price = 7;
    double buy_volume = 8;
    double sell_volume = 9;
}

message PriceType {
    enum Name {
        UNKNOWN = 0;
        OPEN = 1;
        CLOSE = 2;
    }

    Name name = 1;
}

message OpenType {
    enum Name {
        UNKNOWN = 0;
        NORMAL = 1;
        REVERSE = 2;
    }

    Name name = 1;
}

message Rule {
    message Indicator {
        message SimpleMovingAverage {
            enum Condition {
                UNKNOWN = 0;
                ABOVE_SIGNAL_LINE = 1;
                BELOW_SIGNAL_LINE = 2;
            }

            Condition condition = 1;
            int64 period = 2;
        }

        message RelativeStrengthIndex {
            enum Condition {
                UNKNOWN = 0;
                ABOVE_OVER_BOUGHT_LINE = 1;
                BELOW_OVER_BOUGHT_LINE = 2;
                ABOVE_OVER_SOLD_LINE = 3;
                BELOW_OVER_SOLD_LINE = 4;
            }

            Condition condition = 1;
            int64 period = 2;
            int64 over_bought = 3;
            int64 over_sold = 4;
        }

        message MACD {
            enum Condition {
                UNKNOWN = 0;
                SIGNAL_LINE_ABOVE_MACD = 1;
                SIGNAL_LINE_BELOW_MACD = 2;
            }

            Condition condition = 1;
            int64 short_term = 2;
            int64 long_term = 3;
            int64 length = 4;
        }

        message BollingerBands {
            enum Condition {
                UNKNOWN = 0;
                PRICE_ABOVE_UPPER_BAND = 1;
                PRICE_BELOW_UPPER_BAND = 2;
                PRICE_ABOVE_LOWER_BAND = 3;
                PRICE_BELOW_LOWER_BAND = 4;
                PRICE_ABOVE_MA = 5;
                PRICE_BELOW_MA = 6;
            }

            Condition condition = 1;
            int64 period = 2;
            double deviation = 3;
        }

        message SimpleTakeProfit {
            int64 pips = 1;
        }

        message PivotTakeProfit {
            // todo
        }

        message SimpleStopLoss {
            enum Type {
                UNKNOWN = 0;
                FIXED = 1;
                BAR_TRAILING = 2;
            }

            int64 pips = 1;
        }

        message PivotStopLoss {
            // todo
        }

        oneof condition {
            SimpleTakeProfit simple_take_profit = 100;
            PivotTakeProfit pivot_take_profit = 101;

            SimpleStopLoss simple_stop_loss = 200;
            PivotStopLoss pivot_stop_loss = 201;

            SimpleMovingAverage simple_moving_average = 300;
            RelativeStrengthIndex relative_strength_index = 301;
            MACD macd = 302;
            BollingerBands bollinger_bands = 303;
        }
    }

    Indicator indicator = 1;
    PriceType.Name price_type = 2;
    OpenType.Name open_type = 3;
    int64 period_nanoseconds = 4;
}

message Status {
    enum Name {
        UNKNOWN = 0;
        ENABLED = 1;
        PAUSED = 2;
    }

    Name name = 1;
}

message Direction {
    enum Name {
        UNKNOWN = 0;
        BUY = 1;
        SELL = 2;
    }

    Name name = 1;
}

message Position {
    Direction.Name direction = 1;
    int64 open_price = 2;
    int64 close_price = 3;
    google.protobuf.Timestamp open_time = 4;
    google.protobuf.Timestamp close_time = 5;
    string id = 6;
}

message Symbol {
    enum Name {
        UNKNOWN = 0;

        // FX
        AUD_USD = 100;
        EUR_USD = 101;
        EUR_CHF = 102;
        GBP_JPY = 103;
        USD_CHF = 104;
        USD_GBP = 105;
        USD_CAD = 106;
        USD_JPY = 107;

        // CRYPTO
        BITCOIN = 200;
        LITECOIN = 201;
        ETHEREUM = 202;

        // INDICIES
        US_30 = 300;
        UK_100 = 301;
        DE_30 = 302;

        // COMMODITIES
        SILVER = 400;
        GOLD = 401;
    }

    Name name = 1;
    Broker.Name broker = 2;
}

message RuleSet {
    repeated Rule rules = 1;
}

message Strategy {
    string name = 1;
    RuleSet entry_rules = 2;
    RuleSet exit_rules = 3;
    int64 trade_size = 4;
    int64 take_profit = 5;
    int64 stop_loss = 6;
    Status.Name status = 7;
    string id = 8;
    Symbol symbol = 9;
    repeated Position positions = 10;
    google.protobuf.Timestamp last_evaluated = 11;
}

service DataService {
    rpc CreateStrategy(CreateStrategyRequest) returns (CreateStrategyResponse);
    rpc UpdateStrategy(UpdateStrategyRequest) returns (UpdateStrategyResponse);
    rpc DeleteStrategy(DeleteStrategyRequest) returns (DeleteStrategyResponse);
    rpc ListStrategies(ListStrategiesRequest) returns (ListStrategiesResponse);

    rpc GetPriceHistory(GetPriceHistoryRequest) returns (GetPriceHistoryResponse);

    rpc AddTick(AddTickRequest) returns (AddTickResponse);

    rpc CreateUser(CreateUserRequest) returns (CreateUserResponse);
    rpc UpdateUser(UpdateUserRequest) returns (UpdateUserResponse);
    rpc ListUsers(ListUsersRequest) returns (ListUsersResponse);

    rpc AddOrder(AddOrderRequest) returns (AddOrderResponse);

    rpc AddXTBTrade(AddXTBTradeRequest) returns (AddXTBTradeResponse);
}

message CreateStrategyRequest {
    Strategy strategy = 1;
}
message CreateStrategyResponse {
    string id = 1;
}

message UpdateStrategyRequest {
    Strategy strategy = 1;
}
message UpdateStrategyResponse {
}

message DeleteStrategyRequest {
    string id = 1;
}
message DeleteStrategyResponse {
}

message ListStrategiesRequest {
    // todo some stuff
}
message ListStrategiesResponse {
    repeated Strategy strategies = 1;
}

service StrategyEvaluator {
    rpc Evaluate(EvaulateStrategyRequest) returns (EvaluateStrategyResponse);
}

message EvaulateStrategyRequest {
    Strategy strategy = 1;
    repeated Candlestick candlesticks = 2;
    bool has_open_position = 3;
}
message EvaluateStrategyResponse {
    message Action {
        message OpenPosition {
            Direction.Name direction = 1;
            int64 price = 2;
        }

        message ClosePosition {
            int64 price = 1;
        }

        oneof action {
            OpenPosition open_position = 1;
            ClosePosition close_position = 2;
        }
    }

    Action action = 1;
}

message CandlestickWindow {
    enum Name {
        UNKNOWN = 0;

        // time = in seconds
        ONE_MINUTE = 60;
        FIVE_MINUTE = 300;
        TEN_MINUTE = 600;
        THIRTY_MINUTE = 1800;

        ONE_HOUR = 3600;
        THREE_HOUR = 10800;
        SIX_HOUR = 21600;
        TWELVE_HOUR = 43200;

        ONE_DAY = 86400;
    }
}

message GetPriceHistoryRequest {
    Broker.Name broker = 1;
    Symbol.Name symbol = 2;
    google.protobuf.Timestamp start = 3;
    google.protobuf.Timestamp end = 4;
    CandlestickWindow.Name window = 5;
}
message GetPriceHistoryResponse {
    repeated Candlestick candlesticks = 1;
}

message Tick {
    google.protobuf.Timestamp timestamp = 1;
    Broker.Name broker = 2;
    Symbol.Name symbol = 3;
    double price = 4;
    double spread = 5;
    double buy_volume = 6;
    double sell_volume = 7;
}

message AddTickRequest {
    Tick tick = 1;
}
message AddTickResponse {}


message User {
    message BrokerConnection {
        Broker.Name broker = 1;
        string username = 2; // todo (obviously) make this a lot more secure
        string password = 3; // todo will this work with oauth or is a oneof better
        string session_id = 4; // todo this shouldnt be next to the username and password thats dumb as fuck
    }

    string id = 1;
    string name = 2;
    repeated BrokerConnection broker_connections = 3;
}

message CreateUserRequest {
    User user = 1;
}
message CreateUserResponse {
    string id = 1;
}

message UpdateUserRequest {
    User user = 1;
}
message UpdateUserResponse {}

message ListUsersRequest {
    // todo filters e.g. has_session
}
message ListUsersResponse {
    repeated User users = 1;
}

message AddOrderRequest {
    Broker.Name broker = 1;
    Symbol.Name symbol = 2;
    Direction.Name direction = 3;
    double price = 4;
    double volume = 5;
    google.protobuf.Timestamp timestamp = 6;
}
message AddOrderResponse {
    string order_id = 1;
}

service BrokerService {
    rpc GetCurrentSessions(GetCurrentSessionsRequest) returns (GetCurrentSessionsResponse);
    rpc OpenSession(OpenSessionRequest) returns (OpenSessionResponse);
    rpc OpenPosition(OpenPositionRequest) returns (OpenPositionResponse);
    rpc ClosePosition(ClosePositionRequest) returns (ClosePositionResponse);
    rpc GetBrokerPriceHistory(GetBrokerPriceHistoryRequest) returns (GetBrokerPriceHistoryResponse);
    rpc SubscribeToPriceChanges(SubscribeToPriceChangesRequest) returns (SubscribeToPriceChangesResponse);

    // used by the broker services to notify the router of their existence - maybe a service mesh is better
    rpc RegisterBroker(RegisterBrokerRequest) returns (RegisterBrokerResponse);
}

message GetCurrentSessionsRequest {
}
message GetCurrentSessionsResponse {
    repeated string session_id = 1;
}

message OpenSessionRequest {
    string username = 1;
    string password = 2;
}
message OpenSessionResponse {
    string session_id = 1;
}

message OpenPositionRequest {
    string session_id = 1;
    Direction.Name direction = 2;
    Symbol.Name symbol = 3;
    double price = 4;
    double voliume = 5;
    string user_id = 6;
    Broker.Name broker = 7;
    string id = 8;
}
message OpenPositionResponse {
    string id = 1; // if an id is not provided in the request it is given in the response
}

message ClosePositionRequest {
    string session_id = 1;
    Broker.Name broker = 2;
    Symbol.Name symbol = 3;
    string id = 4;
    int64 price = 5;
    string user_id = 6;
}
message ClosePositionResponse {
    google.protobuf.Timestamp execution_time = 1;
    int64 execution_price = 2;
}

message GetBrokerPriceHistoryRequest {
    string session_id = 1;
    Symbol symbol = 2;
}
message GetBrokerPriceHistoryResponse {
    repeated Candlestick candlesticks = 1;
}

message SubscribeToPriceChangesRequest {
    string session_id = 1;
    Symbol.Name symbol = 2;
}
message SubscribeToPriceChangesResponse {
}

message RegisterBrokerRequest {
    Broker.Name broker = 1;
    string address = 2;
}
message RegisterBrokerResponse {}

message XTBTrade {
    google.protobuf.Timestamp timestamp = 1;
    string session_id = 2;
    int64 order = 3;
    double close_price = 4;
    google.protobuf.Timestamp close_time = 5;
    bool closed = 6;
    string cmd = 7;
    string comment = 8;
    double commission = 9;
    string custom_comment = 10;
    int64 digits = 11;
    google.protobuf.Timestamp expiration = 12;
    double margin_rate = 13;
    int64 offset = 14;
    double open_price = 15;
    google.protobuf.Timestamp open_time = 16;
    int64 order2 = 17;
    int64 position = 18;
    double profit = 19;
    double stop_loss = 20;
    string state = 21;
    double storage = 22;
    Symbol.Name symbol = 23;
    double take_profit = 24;
    string type = 25;
    double volume = 26;
}

message AddXTBTradeRequest {
    XTBTrade trade = 1;
}
message AddXTBTradeResponse {}

service OrderService {
    rpc OpenPosition(OpenPositionRequest) returns (OpenPositionResponse);
    rpc ClosePosition(ClosePositionRequest) returns (ClosePositionResponse);
}

